AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS Infrastructure for Charles Schwab API Integration'

Mappings:
  RegionMap:
    us-east-1:
      AMI: ami-05ac965fc0f5788ba  # Amazon Linux 2023 AMI
    us-west-2:
      AMI: ami-0c2d3e23b7b644f0b  # Amazon Linux 2023 AMI
    eu-west-1:
      AMI: ami-0c02fb55956c7d316  # Amazon Linux 2023 AMI
    ap-southeast-1:
      AMI: ami-0497a974f8d5dcef8  # Amazon Linux 2023 AMI
    sa-east-1:
      AMI: ami-0c820c196a818d66a  # Amazon Linux 2023 AMI (Brazil - SÃ£o Paulo)
    ap-south-1:
      AMI: ami-0f58b397bc5c1f2e8  # Amazon Linux 2023 AMI
    eu-central-1:
      AMI: ami-0faab6bdbac9486fb  # Amazon Linux 2023 AMI

Parameters:
  KeyPairName:
    Type: String
    Default: schwab-api-keypair
    Description: Name of the EC2 Key Pair for SSH access
  
  InstanceType:
    Type: String
    Default: t3.small
    AllowedValues:
      - t3.micro
      - t3.small
      - t3.medium
      - t3.large
      - t2.micro
      - t2.small
    Description: EC2 instance type
  
  Environment:
    Type: String
    Default: production
    AllowedValues:
      - development
      - staging
      - production
    Description: Environment name
  
  ElasticIPAllocationId:
    Type: String
    Default: ""
    Description: (Optional) Allocation ID of an existing Elastic IP to associate with the application server (e.g., eipalloc-09b102c09f7400e53). Leave empty to create a new one.

Conditions:
  CreateNewElasticIP: !Equals [!Ref ElasticIPAllocationId, ""]

Resources:
  # VPC Configuration
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-schwab-api-vpc'

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-schwab-api-igw'

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  # Public Subnet
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-schwab-api-public-subnet'

  # Route Table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-schwab-api-public-routes'

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet

  # Security Group for API Server
  APISecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${Environment}-schwab-api-sg'
      GroupDescription: Security group for Schwab API EC2 instance
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
          Description: SSH access
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 10.0.0.0/16
          Description: API access from VPC
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: All outbound traffic
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-schwab-api-sg'

  # Security Group for Application Server
  AppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${Environment}-schwab-app-sg'
      GroupDescription: Security group for Application Server EC2 instance
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
          Description: SSH access
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: HTTP access
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: HTTPS access
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: 10.0.0.0/16
          Description: PostgreSQL access from VPC
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: All outbound traffic
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-schwab-app-sg'

  # IAM Role for EC2 Instance
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${Environment}-schwab-api-ec2-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      Policies:
        - PolicyName: SchwabAPIPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                  - secretsmanager:DescribeSecret
                Resource: !Ref SchwabAPISecret
              - Effect: Allow
                Action:
                  - secretsmanager:CreateSecret
                  - secretsmanager:UpdateSecret
                  - secretsmanager:GetSecretValue
                  - secretsmanager:DescribeSecret
                Resource: !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${Environment}/schwab-api/tokens*'
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogStreams
                  - logs:DescribeLogGroups
                Resource: '*'
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource: '*'

  # Instance Profile
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub '${Environment}-schwab-api-instance-profile'
      Roles:
        - !Ref EC2Role

  # Secrets Manager for API Keys
  SchwabAPISecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '${Environment}/schwab-api/credentials'
      Description: Charles Schwab API credentials
      SecretString: !Sub |
        {
          "client_id": "REPLACE_WITH_YOUR_CLIENT_ID",
          "client_secret": "REPLACE_WITH_YOUR_CLIENT_SECRET"
        }

  # API Server EC2 Instance
  APIInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', AMI]
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyPairName
      VpcId: !Ref VPC
      SubnetId: !Ref PublicSubnet
      SecurityGroupIds:
        - !Ref APISecurityGroup
      IamInstanceProfile: !Ref EC2InstanceProfile
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y python3 python3-pip git htop
          
          # Install Docker
          yum install -y docker
          systemctl start docker
          systemctl enable docker
          usermod -a -G docker ec2-user
          
          # Install Docker Compose
          curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose
          
          # Create application directory
          mkdir -p /opt/schwab-api
          chown ec2-user:ec2-user /opt/schwab-api
          
          # Install CloudWatch agent
          wget https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm
          rpm -U ./amazon-cloudwatch-agent.rpm
          
          # Create log directory
          mkdir -p /var/log/schwab-api
          chown ec2-user:ec2-user /var/log/schwab-api
          
          # Setup complete
          echo "API Server setup completed" > /var/log/setup-complete.log
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-schwab-api-server'
        - Key: Environment
          Value: !Ref Environment
        - Key: Role
          Value: API

  # Application Server EC2 Instance
  AppInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', AMI]
      InstanceType: t3.medium  # Larger instance for application server
      KeyName: !Ref KeyPairName
      VpcId: !Ref VPC
      SubnetId: !Ref PublicSubnet
      SecurityGroupIds:
        - !Ref AppSecurityGroup
      IamInstanceProfile: !Ref EC2InstanceProfile
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y python3 python3-pip git htop nginx
          
          # Install Docker
          yum install -y docker
          systemctl start docker
          systemctl enable docker
          usermod -a -G docker ec2-user
          
          # Install Docker Compose
          curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose
          
          # Create application directory
          mkdir -p /opt/schwab-app
          chown ec2-user:ec2-user /opt/schwab-app
          
          # Install CloudWatch agent
          wget https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm
          rpm -U ./amazon-cloudwatch-agent.rpm
          
          # Create log directory
          mkdir -p /var/log/schwab-app
          chown ec2-user:ec2-user /var/log/schwab-app
          
          # Setup Nginx
          systemctl enable nginx
          
          # Setup complete
          echo "Application Server setup completed" > /var/log/setup-complete.log
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-schwab-app-server'
        - Key: Environment
          Value: !Ref Environment
        - Key: Role
          Value: Application

  # Elastic IP for Application Server
  ElasticIP:
    Type: AWS::EC2::EIP
    Condition: CreateNewElasticIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-schwab-app-eip'

  # Elastic IP Association
  ElasticIPAssociation:
    Type: AWS::EC2::EIPAssociation
    Properties:
      AllocationId: !If 
        - CreateNewElasticIP
        - !GetAtt ElasticIP.AllocationId
        - !Ref ElasticIPAllocationId
      InstanceId: !Ref AppInstance

  # CloudWatch Log Group
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/ec2/${Environment}-schwab-api'
      RetentionInDays: 30

Outputs:
  APIInstanceId:
    Description: API Server EC2 Instance ID
    Value: !Ref APIInstance
    Export:
      Name: !Sub '${Environment}-schwab-api-instance-id'

  AppInstanceId:
    Description: Application Server EC2 Instance ID
    Value: !Ref AppInstance
    Export:
      Name: !Sub '${Environment}-schwab-app-instance-id'

  APIPrivateIP:
    Description: Private IP address of the API server
    Value: !GetAtt APIInstance.PrivateIp
    Export:
      Name: !Sub '${Environment}-schwab-api-private-ip'

  AppPublicIP:
    Description: Public IP address of the Application server (Elastic IP)
    Value: !GetAtt AppInstance.PublicIp
    Export:
      Name: !Sub '${Environment}-schwab-app-public-ip'

  AppPublicDNS:
    Description: Public DNS name of the Application server
    Value: !GetAtt AppInstance.PublicDnsName
    Export:
      Name: !Sub '${Environment}-schwab-app-public-dns'

  ElasticIPAddress:
    Description: Elastic IP address for the Application server
    Value: !GetAtt AppInstance.PublicIp
    Export:
      Name: !Sub '${Environment}-schwab-app-elastic-ip'

  SecretArn:
    Description: ARN of the Secrets Manager secret
    Value: !Ref SchwabAPISecret
    Export:
      Name: !Sub '${Environment}-schwab-api-secret-arn'

  APISSHCommand:
    Description: SSH command to connect to the API server
    Value: !Sub 'ssh -i ${KeyPairName}.pem ec2-user@${APIInstance.PublicIp}'

  AppSSHCommand:
    Description: SSH command to connect to the Application server
    Value: !Sub 'ssh -i ${KeyPairName}.pem ec2-user@${AppInstance.PublicIp}'

  DomainSetupInstructions:
    Description: Instructions for setting up the domain
    Value: !If 
      - CreateNewElasticIP
      - !Sub 'Point schwabapi.isaaccmartinez.com A record to: ${ElasticIP}'
      - 'DNS already configured - using preserved Elastic IP'
